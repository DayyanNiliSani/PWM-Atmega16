/*******************************************************
This program was created by the
CodeWizardAVR V3.12 Advanced
Automatic Program Generator
Â© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : 
Version : 
Date    : 5/16/2017
Author  : 
Company : 
Comments: 


Chip type               : ATmega32
Program type            : Application
AVR Core Clock frequency: 8.000000 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 512
*******************************************************/

#include <mega32.h>
#include <delay.h>

// Alphanumeric LCD functions
//#include <alcd.h>
void Init();
// Declare your global variables here
char state =3 ;
char key[5]={255,255,255,255,255};
char  i = 1;
// External Interrupt 0 service routine
interrupt [EXT_INT0] void ext_int0_isr(void)
{

    if(PIND.2==1 && state == 3)
    {
           
        TCCR2=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (1<<CS00);
        //TCNT2=-200;
        
    }
    if(PIND.2==1 && state == 0)
    {
        TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
        TCNT0=0;
        TCCR2=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (1<<CS00); 
        
        state =2 ; 

    }    
    if(PIND.2==0 && state == 2)
    {  
        state = 4;
        TCCR0=00;     
        DDRC = 0xff;
       // PORTC = TCNT0;           
        if(TCNT0<25)
        {
            key[i]=0;
        }
        else if(TCNT0>=25 && TCNT0<50)
            {
            key[i]=1;
            }
        else if(TCNT0>=50 && TCNT0<80)
        {
            key[i]=2;
        }
        else if(TCNT0>=80 && TCNT0<110)
        {
            key[i]=3;            
            
        }
        else if(TCNT0>=110 && TCNT0<125)
        {
            key[i]=4;            
        }
        else if(TCNT0>=125 && TCNT0<150)
        {
            key[i]=5;
        }
        else if(TCNT0>=150 && TCNT0<175)
        {
            key[i]=6;
        }
        else if(TCNT0>=175 && TCNT0<205)
        {
            key[i]=7;
         }      
        else if(TCNT0>=205 && TCNT0<225)
        {
            key[i]=8;
        }      
        else if(TCNT0>=225 && TCNT0<250)
        {
            key[i]=9;
        } 
              
      
   }                   
    if(i == 5)
    {
        i =1 ;
    }
}
int time;
char stoop = 0;
char controlS= 0;
long num =0 ;   
int outp = 0B100000;
int control;
int j =0 ;
int output= 1;
interrupt [TIM2_OVF] void timer2_ovf_isr(void)
{
      //TCNT2 = -200;
      num++;        
      if(state == 3 && num == 20){state = 0; num = 0; TCCR2 = 0 ;} 
      if(num == 500 && state == 4)
      {
      state = 1;
      num = 0 ;
      }
      if(num == 8000 && state == 1)
      {
        TCCR2 =0 ;
        state = 3;
        num = 0 ;
        i++;
        if(i == 5)
        {
            i = 1;
            controlS =0;
            time = (key[2]*10 + key[3]);  
            j= 0;
            if(key[4] == 1)control = 0b1110;
            if(key[4] == 2)control = 0b1100;
            if(key[4] == 3)control = 0b1000;
            if(key[4] == 4)control = 0b0000; 
            PORTC = control;                   
            TCCR2=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (1<<CS00);  
            TCNT2 =0 ;
            state = 6;
            stoop = 0 ;
            //PORTA = 11;
        }
      }
      if(state == 6 && stoop == 0 )
      {    
        if(key[1] == 1){
        PORTA = output << j;
        j++;
        if(j==6)
        {
            j = 0;
        }  
        stoop = 1;
        }
        if(key[1] == 0)
        {
            PORTA = outp >> j;
            j++;
            if(j==6)
            {
            j = 0;
            }  
            stoop = 1;
        }
        
        
      }                         
      if(state == 6 && stoop ==1 && num == 10000)
      {          
        
          num =0;
          stoop = 0 ;
          controlS++;  
         // PORTB = controlS;
      }
      if(state == 6 && controlS>time)
      {            
        state =3;  
        stoop = 0;
        //PORTA = 0;
        //PORTC = 0;
        controlS = 0 ;
        j =0 ; 
        //stoop = 1;
        num =0;   
        TCCR2=0;
      } 
      
       
// Place your code here
}
//======================
void main(void)
{
    char light=1;
    Init();
    DDRB=0xff;
    DDRA=0xff;
    DDRC = 0xff; 
    while (1)
      { 
         PORTB = key[i];
     // PORTC = i ;
         
      }

}
//===========================
void Init()
{
// Declare your local variables here

// Input/Output Ports initialization
// Port A initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);

// Port B initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);

// Port C initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);

// Port D initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: 1000.000 kHz
// Mode: Normal top=0xFF
// OC0 output: Disconnected
// Timer Period: 0.256 ms
TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
TCNT0=0x00;
OCR0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: Timer1 Stopped
// Mode: Normal top=0xFFFF
// OC1A output: Disconnected
// OC1B output: Disconnected
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2 output: Disconnected
ASSR=0<<AS2;
TCCR2=0;
TCNT2=0x00;
OCR2=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);

// External Interrupt(s) initialization
// INT0: On
// INT0 Mode: Any change
// INT1: Off
// INT2: Off
GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (1<<ISC00);
MCUCSR=(0<<ISC2);
GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);

// USART initialization
// USART disabled
UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);

// Analog Comparator initialization
// Analog Comparator: Off
// The Analog Comparator's positive input is
// connected to the AIN0 pin
// The Analog Comparator's negative input is
// connected to the AIN1 pin
ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
SFIOR=(0<<ACME);

// ADC initialization
// ADC disabled
ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);

// SPI initialization
// SPI disabled
SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);

// TWI initialization
// TWI disabled
TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);

// Alphanumeric LCD initialization
// Connections are specified in the
// Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
// RS - PORTA Bit 0
// RD - PORTA Bit 1
// EN - PORTA Bit 2
// D4 - PORTA Bit 4
// D5 - PORTA Bit 5
// D6 - PORTA Bit 6
// D7 - PORTA Bit 7
// Characters/line: 16
//lcd_init(16);

// Global enable interrupts
#asm("sei")

}
